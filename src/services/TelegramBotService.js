const { Telegraf } = require("telegraf");
const logger = require("../utils/Logger");
const config = require("../utils/ConfigManager");

/**
 * Telegram Bot Service with clean handler management
 */
class TelegramBotService {
    constructor(database, modeusService, googleService) {
        this.database = database;
        this.modeusService = modeusService;
        this.googleService = googleService;
        this.bot = new Telegraf(config.get('credentials.telegram'));
        this.appConfig = config.get('app');
        
        // User state management
        this.userStates = new Map();
        this.textHandlers = [];

        this.setupBot();
    }

    /**
     * Setup bot handlers and middleware
     */
    setupBot() {
        // Setup command handlers
        this.setupCommandHandlers();
        
        // Setup text handlers
        this.setupTextHandlers();
        
        // Setup action handlers
        this.setupActionHandlers();
        
        // Setup error handling
        this.bot.catch((error) => {
            logger.error("Bot error", error);
        });

        logger.success("Telegram bot handlers configured");
    }

    /**
     * Setup command handlers
     */
    setupCommandHandlers() {
        // Start command
        this.bot.start((ctx) => {
            this.deleteMessage(ctx, ctx.message.message_id);
            this.sendHelpDialog(ctx);
        });

        // Help command
        this.bot.help((ctx) => {
            this.deleteMessage(ctx, ctx.message.message_id);
            this.sendHelpDialog(ctx);
        });

        // Info command
        this.bot.command("info", async (ctx) => {
            this.deleteMessage(ctx, ctx.message.message_id);
            await this.handleInfoCommand(ctx);
        });

        // Link Modeus command
        this.bot.command("link_modeus", (ctx) => {
            this.deleteMessage(ctx, ctx.message.message_id);
            this.handleLinkModeusCommand(ctx);
        });

        // Link Google command
        this.bot.command("link_google", (ctx) => {
            this.deleteMessage(ctx, ctx.message.message_id);
            this.handleLinkGoogleCommand(ctx);
        });

        // Reset calendar command
        this.bot.command("reset_calendar", async (ctx) => {
            this.deleteMessage(ctx, ctx.message.message_id);
            await this.handleResetCalendarCommand(ctx);
        });

        logger.info("Command handlers registered");
    }

    /**
     * Setup text handlers
     */
    setupTextHandlers() {
        // Main text handler
        this.bot.hears(/^(?!\/).*$/, (ctx) => {
            if (ctx.message.text.startsWith("/")) {
                return;
            }
            
            for (const handler of this.textHandlers) {
                try {
                    handler(ctx);
                } catch (error) {
                    logger.error("Error in text handler", error);
                }
            }
        });

        // Admin text handlers
        this.textHandlers.push(async (ctx) => {
            if (ctx.from.id != this.appConfig.admin_id) return;
            
            await this.handleAdminCommands(ctx);
        });

        // Modeus search handler
        this.textHandlers.push(async (ctx) => {
            if (this.userStates.get(ctx.from.id) !== "modeus_listener") return;
            
            await this.handleModeusSearch(ctx);
        });

        logger.info("Text handlers registered");
    }

    /**
     * Setup action (callback) handlers
     */
    setupActionHandlers() {
        // Reset listeners action
        this.bot.action(/reset_listeners/, async (ctx) => {
            await ctx.answerCbQuery().catch(() => {});
            this.userStates.set(ctx.from.id, "none");
            this.deleteMessage(ctx, ctx.callbackQuery?.message?.message_id);
        });

        // Modeus selection action
        this.bot.action(/modeus_(.+)/, async (ctx) => {
            await this.handleModeusSelection(ctx);
        });

        logger.info("Action handlers registered");
    }

    /**
     * Send help dialog
     */
    async sendHelpDialog(ctx) {
        const helpMessage = `–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Modeus (–¢—é–º–ì–£) –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é Google.
üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤–ª—è—Ç—å—Å—è –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.

<b><u>üîó –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å?</u></b>
üéì 1. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /link_modeus —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Modeus.
üìÖ 2. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /link_google —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é.
‚åõ 3. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–≥—Ä—É–∑–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.

–¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /info`;

        try {
            await ctx.reply(helpMessage, { parse_mode: "HTML" });
        } catch (error) {
            logger.error("Error sending help dialog", error);
        }
    }

    /**
     * Handle info command
     */
    async handleInfoCommand(ctx) {
        try {
            const userInfo = await this.database.getUserInfo(ctx.from.id);
            
            let linkedModeus = false;
            let linkedGoogle = false;

            if (userInfo.length > 0) {
                linkedModeus = userInfo[0].attendee_id != null;
                linkedGoogle = userInfo[0].google_token != null;
            }

            const canRefresh = linkedGoogle && linkedModeus;
            const lastRefresh = await this.getLastRefreshTime();

            const infoMessage = `<b><u>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</u></b>

<u>üîó –ü—Ä–æ—Ñ–∏–ª–∏</u>
–ü—Ä–æ—Ñ–∏–ª—å Modeus: <b>${linkedModeus ? "‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω" : "‚ùå –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"}</b>
–ü—Ä–æ—Ñ–∏–ª—å Google: <b>${linkedGoogle ? "‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω" : "‚ùå –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"}</b>

–ù–∞—Å—Ç—Ä–æ–π–∫–∞: <b>${canRefresh ? "‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ" : "‚ùå –û–¥–∏–Ω –∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω"}</b>

<u>üîÅ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</u>
–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π Modeus –æ–±–Ω–æ–≤–ª—ë–Ω <u>${lastRefresh}</u> (UTC+5)`;

            await ctx.reply(infoMessage, { parse_mode: "HTML" });

        } catch (error) {
            logger.error("Error handling info command", error);
            await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
        }
    }

    /**
     * Handle link Modeus command
     */
    handleLinkModeusCommand(ctx) {
        const message = `<b><u>üéì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Modeus</u></b>

–í–≤–µ–¥–∏ –ø–æ–ª–Ω–æ–µ –§–ò–û –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ:
<code>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</code>`;

        const keyboard = {
            inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "reset_listeners" }]]
        };

        ctx.reply(message, {
            parse_mode: "HTML",
            reply_markup: keyboard
        }).catch(error => logger.error("Error sending link_modeus prompt", error));

        this.userStates.set(ctx.from.id, "modeus_listener");
    }

    /**
     * Handle link Google command
     */
    handleLinkGoogleCommand(ctx) {
        try {
            const url = this.googleService.generateAuthUrl(ctx.from.id);
            
            const message = `<b><u>üìÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Calendar</u></b>

‚ùó –ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å "Modeus Integration" –≤ —Ç–≤–æ—ë–º Google –ê–∫–∫–∞—É–Ω—Ç–µ –∏ –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–º.
–¢–≤–æ–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏ –∏ —Å–æ–±—ã—Ç–∏—è –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã –Ω–µ –±—É–¥—É—Ç.

<a href="${url}">‚û°Ô∏è –ü–µ—Ä–µ–π–¥–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø.</a>

–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –Ω–∞–ø–∏—à–∏ @artem2584`;

            ctx.reply(message, { parse_mode: "HTML" }).catch(error =>
                logger.error("Error sending link_google prompt", error)
            );

        } catch (error) {
            logger.error("Error handling link_google command", error);
            ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
        }
    }

    /**
     * Handle reset calendar command
     */
    async handleResetCalendarCommand(ctx) {
        try {
            await this.database.saveCalendarID(ctx.from.id, null);
            await ctx.reply("‚úÖ –£—Å–ø–µ—Ö! –ë—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –¢–µ–ø–µ—Ä—å —Ç–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –Ω—ë–º.");
        } catch (error) {
            logger.error("Error resetting calendar", error);
            await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
        }
    }

    /**
     * Handle admin commands
     */
    async handleAdminCommands(ctx) {
        const text = ctx.message.text;

        if (text === "reset_calendars") {
            try {
                await this.googleService.resetAllCalendars();
                await ctx.reply("Done - Deleted Calendars");
            } catch (error) {
                logger.error("Error resetting calendars", error);
                await ctx.reply("Error resetting calendars");
            }
        }

        if (text === "redo_checks") {
            try {
                // This would trigger a manual sync - implemented in SyncService
                await ctx.reply("Manual sync triggered");
            } catch (error) {
                logger.error("Error triggering manual sync", error);
                await ctx.reply("Error triggering sync");
            }
        }
    }

    /**
     * Handle Modeus user search
     */
    async handleModeusSearch(ctx) {
        try {
            const userName = ctx.message.text;
            const searchResults = await this.modeusService.findUser(userName);

            if (searchResults.length === 0) {
                const message = `<b><u>üéì –ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</u></b>

–ü–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É "${userName}" –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ @artem2584.`;

                await ctx.reply(message, {
                    parse_mode: "HTML",
                    reply_markup: {
                        inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "reset_listeners" }]]
                    }
                });
                return;
            }

            const buttons = [];
            for (let i = 0; i < Math.min(searchResults.length, 5); i++) {
                const student = searchResults[i];
                buttons.push([{
                    text: `${student.name}${student.student}`,
                    callback_data: `modeus_${student.id}`
                }]);
            }

            buttons.push([{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "reset_listeners" }]);

            const message = `<b><u>üéì –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</u></b>

–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: <b>${searchResults.length}</b>.
–ï—Å–ª–∏ –Ω–µ—Ç —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, –ø–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –§–ò–û –∏–ª–∏ –Ω–∞–ø–∏—à–∏ @artem2584.`;

            await ctx.reply(message, {
                parse_mode: "HTML",
                reply_markup: { inline_keyboard: buttons }
            });

        } catch (error) {
            logger.error("Error in Modeus search", error);
            await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
        }
    }

    /**
     * Handle Modeus profile selection
     */
    async handleModeusSelection(ctx) {
        try {
            const profileId = ctx.match[1];
            await ctx.answerCbQuery();
            
            this.userStates.set(ctx.from.id, "none");
            
            await this.database.saveUserModeus(ctx.from.id, profileId);
            
            const message = `<b><u>üéì –ü—Ä–æ—Ñ–∏–ª—å Modeus –ø—Ä–∏–≤—è–∑–∞–Ω!</u></b>

–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.
ID —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: <code>${profileId}</code>`;

            await ctx.editMessageText(message, { parse_mode: "HTML" });

        } catch (error) {
            logger.error("Error handling Modeus selection", error);
            await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
        }
    }

    /**
     * Get last refresh time formatted
     */
    async getLastRefreshTime() {
        try {
            const lastRefresh = await this.database.getConfigValue("lastRefresh");
            if (lastRefresh.length === 0) {
                return "–Ω–∏–∫–æ–≥–¥–∞";
            }

            const date = new Date(lastRefresh[0].value * 1000);
            return date.toLocaleString('ru-RU', {
                timeZone: 'Asia/Yekaterinburg',
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });

        } catch (error) {
            logger.error("Error getting last refresh time", error);
            return "–æ—à–∏–±–∫–∞";
        }
    }

    /**
     * Utility function to safely delete messages
     */
    deleteMessage(ctx, messageId) {
        if (messageId) {
            ctx.deleteMessage(messageId).catch(() => {
                // Ignore errors - message might already be deleted
            });
        }
    }

    /**
     * Send message to user (used by other services)
     */
    async sendMessage(telegramId, message) {
        try {
            await this.bot.telegram.sendMessage(telegramId, message);
            return true;
        } catch (error) {
            logger.error(`Failed to send message to user ${telegramId}`, error);
            return false;
        }
    }

    /**
     * Start the bot
     */
    async start() {
        try {
            this.bot.launch().catch(e => 
                logger.error("Failed to start Telegram bot", e)
            );
            logger.success("Telegram bot started successfully");

            // Graceful stop handlers
            process.once("SIGINT", () => this.stop("SIGINT"));
            process.once("SIGTERM", () => this.stop("SIGTERM"));

        } catch (error) {
            logger.error("Failed to start Telegram bot", error);
            throw error;
        }
    }

    /**
     * Stop the bot gracefully
     */
    stop(signal) {
        logger.info(`${signal} received, stopping bot...`);
        this.bot.stop(signal);
    }
}

module.exports = TelegramBotService;